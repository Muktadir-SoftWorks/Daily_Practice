write a program that accepts string of your id and reverse it using stack. using c#include <stdio.h>

#include <string.h>

#define MAX 100

// Stack structure
struct Stack {
    int top;
    char items[MAX];
};

// Function to initialize the stack
void initStack(struct Stack *s) {
    s->top = -1;
}

// Function to check if the stack is full
int isFull(struct Stack *s) {
    return s->top == MAX - 1;
}

// Function to check if the stack is empty
int isEmpty(struct Stack *s) {
    return s->top == -1;
}

// Function to push a character onto the stack
void push(struct Stack *s, char c) {
    if (isFull(s)) {
        printf("Stack is full\n");
    } else {
        s->items[++(s->top)] = c;
    }
}

// Function to pop a character from the stack
char pop(struct Stack *s) {
    if (isEmpty(s)) {
        printf("Stack is empty\n");
        return '\0'; // Return null character if stack is empty
    } else {
        return s->items[(s->top)--];
    }
}

int main() {
    char id[MAX], reversed[MAX];
    struct Stack stack;
    
    // Initialize the stack
    initStack(&stack);
    
    // Accept input from user
    printf("Enter your ID: ");
    fgets(id, MAX, stdin);

    // Remove newline character if present
    id[strcspn(id, "\n")] = '\0';

    // Push each character of the string into the stack
    for (int i = 0; i < strlen(id); i++) {
        push(&stack, id[i]);
    }

    // Pop characters from the stack to reverse the string
    int i = 0;
    while (!isEmpty(&stack)) {
        reversed[i++] = pop(&stack);
    }
    reversed[i] = '\0'; // Null-terminate the reversed string

    // Display the reversed string
    printf("Reversed ID: %s\n", reversed);

    return 0;
}


write a program that implement a queue using an array create a function that removes an element from the queue

#include <stdio.h>
#define MAX 100

// Queue structure
struct Queue {
    int front, rear;
    int items[MAX];
};

// Initialize the queue
void initQueue(struct Queue *q) {
    q->front = -1;
    q->rear = -1;
}

// Check if the queue is empty
int isEmpty(struct Queue *q) {
    return q->front == -1;
}

// Check if the queue is full
int isFull(struct Queue *q) {
    return q->rear == MAX - 1;
}

// Function to add an element to the queue (enqueue)
void enqueue(struct Queue *q, int value) {
    if (isFull(q)) {
        printf("Queue is full!\n");
    } else {
        if (q->front == -1) q->front = 0; // First element
        q->items[++q->rear] = value;
        printf("Enqueued: %d\n", value);
    }
}

// Function to remove an element from the queue (dequeue)
int dequeue(struct Queue *q) {
    int value;
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
        return -1;
    } else {
        value = q->items[q->front];
        if (q->front >= q->rear) { // Reset queue if last element is removed
            q->front = -1;
            q->rear = -1;
        } else {
            q->front++;
        }
        printf("Dequeued: %d\n", value);
        return value;
    }
}

int main() {
    struct Queue q;
    initQueue(&q);

    // Example operations
    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);

    dequeue(&q); // Remove first element
    dequeue(&q); // Remove second element

    return 0;
}



write a program that implement a queue using singly linked list

#include <stdio.h>
#include <stdlib.h>

// Node structure for the linked list
struct Node {
    int data;
    struct Node* next;
};

// Queue structure
struct Queue {
    struct Node* front;
    struct Node* rear;
};

// Function to initialize the queue
void initQueue(struct Queue* q) {
    q->front = NULL;
    q->rear = NULL;
}

// Check if the queue is empty
int isEmpty(struct Queue* q) {
    return q->front == NULL;
}

// Function to add an element to the queue (enqueue)
void enqueue(struct Queue* q, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;

    if (q->rear == NULL) {
        q->front = newNode; // If queue is empty, new node is both front and rear
        q->rear = newNode;
    } else {
        q->rear->next = newNode; // Add new node at the rear
        q->rear = newNode;
    }
    printf("Enqueued: %d\n", value);
}

// Function to remove an element from the queue (dequeue)
int dequeue(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
        return -1;
    }

    struct Node* temp = q->front;
    int value = temp->data;
    q->front = q->front->next; // Move front to the next node

    // If the queue becomes empty, reset the rear pointer
    if (q->front == NULL) {
        q->rear = NULL;
    }

    free(temp); // Free memory of the dequeued node
    printf("Dequeued: %d\n", value);
    return value;
}

// Function to display the queue
void displayQueue(struct Queue* q) {
    struct Node* temp = q->front;
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
        return;
    }

    printf("Queue: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    struct Queue q;
    initQueue(&q);

    // Example operations
    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);
    displayQueue(&q);

    dequeue(&q); // Remove first element
    displayQueue(&q);

    dequeue(&q); // Remove second element
    displayQueue(&q);

    return 0;
}


Min Edit distance

#include <stdio.h>
#include <string.h>

int editDistRec(char* s1, char* s2, int m, int n) {
    if (m == 0) return n;
    if (n == 0) return m;

    if (s1[m - 1] == s2[n - 1]) 
        return editDistRec(s1, s2, m - 1, n - 1);

    int insert = editDistRec(s1, s2, m, n - 1);
    int remove = editDistRec(s1, s2, m - 1, n);
    int replace = editDistRec(s1, s2, m - 1, n - 1);

    return 1 + (insert < remove ? (insert < replace ? insert : replace) : (remove < replace ? remove : replace));
}

int editDist(char* s1, char* s2) {
    return editDistRec(s1, s2, strlen(s1), strlen(s2));
}

int main() {
    char s1[] = "GEEXSFRGEEKKS";
    char s2[] = "GEEKSFORGEEKS";

    printf("Edit distance: %d\n", editDist(s1, s2));

    return 0;
}






















